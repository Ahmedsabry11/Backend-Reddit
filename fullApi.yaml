openapi: 3.0.0

info:
  title: Reddit Restful API
  description: API Documentaion.
  version: "1.0.0"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://localhost:8000/api/v1
    description: Production server
paths:
  #TO DO
  #######################################################
  #/user/username/hidden
  #/user/username/saved
  #check what to do with icons and images attribute
  #####################################################
  /user/login:
    description: User Resource
    post:
      tags:
        - "Users"
      description: Get authenticated to access our api services later.
      summary: User authentication

      requestBody:
        description: get authenticated using userName & password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: uniqueuser
                password:
                  type: string
                  example: Aa1234**
      responses:
        200:
          description: Success operation
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt=abcde12345; expires = time ; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                  expiresIn:
                    type: string
                    format: date-time
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: invaild userName or password
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: provide userName and password
  /user/logout:
    description: User Resource
    post:
      tags:
        - "Users"
      description: update token stored in user
      summary: Log Out from website
      security:
        - BearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                  expiresIn:
                    type: string
                    format: date-time
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt=abcde12345; expires = time ;Path=/; HttpOnly

        401:
          $ref: "#/components/responses/UnauthorizedError"

  /user/signup:
    description: User Resource
    post:
      tags:
        - "Users"
      description: signup as user in reddit
      summary: User registration
      requestBody:
        description: new user registrated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: uniqueuser
                email:
                  type: string
                  example: user@gmail.com
                password:
                  type: string
                  example: Aa1234**
      responses:
        201:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                  expiresIn:
                    type: string
                    format: date-time
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: userName already exists
  #/recover_userName:
  /user/forgotuserName:
    post:
      tags:
        - Users
      summary: Forgot userName
      requestBody:
        description: Send the post/comment id
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        # '409':
        #   description: Conflict
        #   content:
        #     application/json:
        #       schema:
        #           $ref: '#/components/schemas/error'

  /user/forgotPassword:
    post:
      tags:
        - Users
      summary: Forgot password
      requestBody:
        description: Send the post/comment id
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                userName:
                  type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        # '409':
        #   description: Conflict
        #   content:
        #     application/json:
        #       schema:
        #           $ref: '#/components/schemas/error'

  /user/resetuserName/{token}:
    description: User Resource
    post:
      tags:
        - "Users"
      description: change forgotten userName
      summary: Password reset
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: token
          description: reset token
          required: true
          schema:
            type: string

      requestBody:
        description: new user registrated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: userName
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                  expiresIn:
                    type: string
                    format: date-time

        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token is invalid or has expired

  /user/resetPassword/{token}:
    description: User Resource
    post:
      tags:
        - "Users"
      description: change forgotten password
      summary: Password reset
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: token
          description: reset token
          required: true
          schema:
            type: string

      requestBody:
        description: new user registrated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Aa1234**
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                  expiresIn:
                    type: string
                    format: date-time

        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Token is invalid or has expired

  /user/me/prefs:
    description: User Resource
    get:
      tags:
        - "Users"
      description: Get user preferences
      summary: Get preferences
      security:
        - BearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  prefs:
                    $ref: "#/components/schemas/userPreferences"
        401:
          $ref: "#/components/responses/UnauthorizedError"

    patch:
      tags:
        - "Users"
      description: "Update user preferences such as: "
      summary: Update preferences
      security:
        - BearerAuth: []
        - cookieAuth: []
      requestBody:
        description: "update one or more of user preferences down"
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userPreferences"

      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  prefs:
                    $ref: "#/components/schemas/userPreferences"

        304:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: not modified
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /user/me/friends/{userName}:
    description: User Resource
    get:
      tags:
        - "Users"
      description: Get all informations about friend
      summary: Get friend informations
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          description: friend fullname
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  User:
                    $ref: "#/components/schemas/userPreferences"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: user not found
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - "Users"
      description: become friends with userName
      summary: add friend
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          description: friend fullname
          required: true
          schema:
            type: string
      responses:
        201:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  User:
                    $ref: "#/components/schemas/userPreferences"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: user not found
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - "Users"
      description: delete friend, end relationship between them
      summary: Delete friend
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          description: friend fullname
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: user is not a friend of you
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: user not found
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /user/{userName}/blockUser:
    post:
      tags:
        - Users
      summary: Block a certain user
      description: Block a certain user so they won’t be able to directly message or send each other chat requests,reply, vote on, or award each other’s posts or comments in communities and they won’t be able to directly message or send each other chat requests.
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - name: userName
          in: path
          description: id of the user
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: t2_yb42mk
                  name:
                    type: string
                    example: john

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  #get all mods

  /user/{userName}/unblockUser:
    post:
      tags:
        - Users
      summary: unblock a certain user
      description: unblock a certain user so they will be able to directly message or send each other chat requests,reply, vote on, or award each other’s posts or comments in communities and they will be able to directly message or send each other chat requests.
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - name: userName
          in: path
          description: id of the user
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/{userName}/follow:
    post:
      tags:
        - Users
      summary: Follow a certain user
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - name: userName
          in: path
          description: id of the user
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/best:
    get:
      tags:
        - Users
      summary: Return a listing of posts according to user preferences
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /user/hot:
    get:
      tags:
        - Users
      summary: Return a listing of hot posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /user/new:
    get:
      tags:
        - Users
      summary: Return a listing of new posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /user/top:
    get:
      tags:
        - Users
      summary: Return a listing of top posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
        - in: query
          name: time
          required: true
          schema:
            type: string
            default: today
            enum:
              - now
              - today
              - week
              - month
              - year
              - all
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /user/{userName}/about:
    get:
      tags:
        - Users
      summary: Get all information about user
      description: "all user information "
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/{userName}/overview:
    get:
      tags:
        - Users
      summary: Get user recent activity
      description: "Get user activity sorted by date"
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/overview"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/{userName}/posts:
    get:
      tags:
        - Users
      summary: "Get user posts"
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                description: array of posts
                items:
                  $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: Invalid userName supplied
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/{userName}/comments:
    get:
      tags:
        - Users
      summary: Get user comments
      description: "get comments made by user"
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
        "400":
          description: Invalid userName supplied
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/{userName}/upvoted:
    get:
      tags:
        - Users
      summary: Get upvoted posts
      description: ""
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/upvotes"

        "400":
          description: Invalid userName supplied
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /user/{userName}/downvoted:
    get:
      tags:
        - Users
      summary: Get user downvoted posts
      description: ""
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/downvotes"
        "400":
          description: Invalid userName supplied
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/{userName}/userNameAvailable:
    get:
      tags:
        - Users
      summary: ""
      description: "Check whether a userName is available for registration."
      parameters:
        - in: path
          name: userName
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Bad Request
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  #######################################################

  /categories/randomCategory:
    get:
      tags:
        - Categories
      summary: Get communities from a random category

      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - name: limit
          in: query
          description: number of subreddits
          required: false
          schema:
            type: integer
            format: int64

        - name: page
          in: query
          description: number of the page
          required: false
          schema:
            type: integer
            format: int64

      responses:
        "204":
          description: successful operation

          content:
            application/json:
              schema:
                type: array
                description: some (not all) info about the subreddit ti be shown
                items:
                  $ref: "#/components/schemas/reducedSubredditInfo"

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /categories/{categoryId}/Subreddits:
    description: Post Resource
    get:
      tags:
        - "Categories"
      description: Get list of Communities belong to specific_category
      summary: Get Communities in specific_category
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: categoryId
          description: category id
          required: true
          schema:
            type: string
        - in: query
          name: limit
          description: maximum number of retreived subreddits
          required: false
          schema:
            type: integer
            example: 20
        - in: query
          name: page
          description: " page number, 1 for first group 2 for second group and so on"
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: sort
          description: "sort subreddits by (rank - membersCount)"
          required: false
          schema:
            type: string
            example: rank

      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  subreddits:
                    type: array
                    items:
                      $ref: "#/components/schemas/Subreddit"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: category not found

  /post/trendingsearches:
    get:
      tags:
        - Posts

      description: "get trending searches day by day"
      security:
        - BearerAuth: []
        - cookieAuth: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trending"

        "400":
          description: Bad Request
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /post/{postId}/SuggestedSort:
    post:
      tags:
        - Posts
      summary: "sort comments"
      description: "Suggested sorts are useful to display comments in a certain preferred way for posts. For example, casual conversation may be better sorted by new by default, or AMAs may be sorted by Q&A. A sort of an empty string clears the default sort."
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: postId
          description: post id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/suggestedSort"

      responses:
        "204":
          description: successful operation

        "400":
          description: Invalid post id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  #flairs

  /subreddit/{subredditName}/flair:
    post:
      tags:
        - subreddit
      summary: get list of flairs belonging to a subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          description: post id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/flair"
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    get:
      tags:
        - subreddit
      summary: insert a new flair in the list of flair belonging to a subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/flair"

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/{subredditName}/flair/{flairId}:
    patch:
      tags:
        - flair
      description: edit flair by id
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          required: true
          schema:
            type: string
        - in: path
          name: flairId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/flair"
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      tags:
        - subreddit
      description: delete flair by id
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          required: true
          schema:
            type: string
        - in: path
          name: flairId
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    get:
      tags:
        - subreddit
      description: get flair by id
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          required: true
          schema:
            type: string
        - in: path
          name: flairId
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  #post
  /post:
    post:
      tags:
        - Posts
      summary: Submit a post to a subreddit
      description: Submit will create a post in the subreddit "sr" with the title "title". If kind is "link", then url is expected to be a valid URL to link to. Otherwise, "text", if present, will be the body of the post.
      requestBody:
        description: The post to be submitted
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreate"
        required: true
      security:
        - BearerAuth: []
        - cookieAuth: []
      responses:
        201:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  Post:
                    $ref: "#/components/schemas/PostCreate"
        404:
          description: fail operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: Subreddit not found

  /posts/{postId}:
    delete:
      tags:
        - Posts
      summary: Delete a post
      parameters:
        - in: path
          name: postId
          description: post id
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
        - cookieAuth: []
      responses:
        204:
          description: Deleted successfully
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: post not found

    patch:
      tags:
        - Posts
      summary: Edit the body text of a post
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: postId
          description: post id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: This is a post text
        required: true
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: post not found
  /posts/{postId}/followPost:
    post:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Follow or unfollow a post.
      description: To follow, follow should be True. To unfollow, follow should be False. The user must have access to the subreddit to be able to follow a post within it.
      parameters:
        - in: path
          name: postId
          description: post id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                follow:
                  type: boolean
        required: true
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: post not found

  /posts/{postId}/hide:
    post:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Hide a post
      description: This removes it from the user's default view of subreddit listings.
      parameters:
        - in: path
          name: postId
          description: post id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: post not found
  /posts/{postId}/unhide:
    post:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Unhide a post
      parameters:
        - in: path
          name: postId
          description: post id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: post not found

  /posts/random:
    get:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Returns a random post
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /post/{postId}/save:
    post:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Save a post
      description: This post is added to the list of the user saved posts
      parameters:
        - name: postId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /post/{postId}/unsave:
    post:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: unSave a  saved post
      description: This post is removed from the list of the user saved posts
      parameters:
        - name: postId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /post/{postId}/marknsfw:
    patch:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: mark a post  as NSFW
      description: This post as NSFW (Not Safe For Work)
      parameters:
        - name: postId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /post/{postId}/unmarknsfw:
    patch:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Unmark a NSFW post
      description: This post is not a NSFW (Not Safe For Work) post anymore
      parameters:
        - name: postId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /post/{postId}/lockComments:
    patch:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Lock comments for this post
      description: Nobody can write comments to your post or to the post in a subreddit moderated by you if you lock the post
      parameters:
        - name: postId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /post/{postId}/unlockComments:
    patch:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Unlock comments for this post
      description: Comments can be written again to your post or to the post in a subreddit moderated by you if you unlock the locked post
      parameters:
        - name: postId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /post/{postId}/vote:
    description: Post Resource
    post:
      tags:
        - "Posts"
      security:
        - BearerAuth: []
        - cookieAuth: []
      description: upvote or downvote posts
      summary: Vote Post
      parameters:
        - in: path
          name: postId
          description: post id
          required: true
          schema:
            type: string
        - in: query
          name: dir
          description: "1 for upvote  0 for novote -1 for downvote"
          required: true
          schema:
            type: integer
      responses:
        201:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        409:
          description: Conflict Not Completed Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: "you already upvote (downvote) post"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: post not found
  /post/{postId}/spoiler:
    description: Post Resource
    patch:
      tags:
        - "Posts"
      security:
        - BearerAuth: []
        - cookieAuth: []
      description: mark post as spoiler (by author or the subreddit moderator)
      summary: Spoil Post
      parameters:
        - in: path
          name: postId
          description: post id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: post not found
  /post/{postId}/unspoiler:
    description: Post Resource
    patch:
      tags:
        - "Posts"
      security:
        - BearerAuth: []
        - cookieAuth: []
      description: mark post as unspoiler (by author or the subreddit moderator)
      summary: unSpoil Post
      parameters:
        - in: path
          name: postId
          description: post id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: post not found

  /post/{postId}/spam:
    patch:
      tags:
        - Posts
      summary: Mark a post in the subreddit as spam
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - name: postId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /post/{postId}:
    delete:
      tags:
        - Posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Remove a post
      parameters:
        - name: postId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  #COMMENTS

  /comment/{commentId}:
    patch:
      tags:
        - Comments
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Edit the body text of a comment
      parameters:
        - in: path
          name: commentId
          description: comment id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: This is a comment text
        required: true

      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: comment not found
    delete:
      tags:
        - Posts
      summary: Remove a comment
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - name: commentId
          in: path
          description: id of the comment
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /comment:
    post:
      tags:
        - Comments
      summary: ""
      security:
        - BearerAuth: []
        - cookieAuth: []
      description: "Submit a new comment or reply to a message."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/subbmitComment"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "204":
          description: empty comment

  /comment/suggestedTags:
    get:
      tags:
        - Comments
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - name: postId
          in: query
          description: id of the post to get users who contributed in the post
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  userName:
                    type: string

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /comment/{commentId}/save:
    post:
      tags:
        - Comments
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Save a comment
      description: This comment is added to the list of the user saved comments
      parameters:
        - name: commentId
          in: path
          description: id of the comment
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /comment/{commentId}/unsave:
    post:
      tags:
        - Comments
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: unSave a  saved comment
      description: This post/comment is removed from the list of the user saved comments
      parameters:
        - name: commentId
          in: path
          description: id of the comment
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /comment/{commentId}/marknsfw:
    patch:
      tags:
        - Comments
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: mark a comment as NSFW (by author or the subreddit moderator)
      description: This comment is as NSFW (Not Safe For Work) a
      parameters:
        - name: commentId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /comment/{commentId}/unmarknsfw:
    patch:
      tags:
        - Comments
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Unmark a NSFW comment (by author or the subreddit moderator)
      description: This comment is not a NSFW (Not Safe For Work) comment anymore
      parameters:
        - name: commentId
          in: path
          description: id of the comment
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /comment/{commentId}/lockComments:
    patch:
      tags:
        - Comments
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Lock comments for this comment(by author or the subreddit moderator)
      description: Nobody can write comments to this comment if the writter locked this comment.
      parameters:
        - name: commentId
          in: path
          description: id of the comment
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /comment/{commentId}/unlockComments:
    patch:
      tags:
        - Comments
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Unlock comments for this post (by author or the subreddit moderator)
      description: Comments can be written again to this comment if the writter unlock the locked comment
      parameters:
        - name: commentId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /comment/{commentId}/vote:
    description: Comment Resource
    post:
      tags:
        - "Comments"
      security:
        - BearerAuth: []
        - cookieAuth: []
      description: upvote or downvote comments
      summary: Vote Comment
      parameters:
        - in: path
          name: commentId
          description: comment id
          required: true
          schema:
            type: string
        - in: query
          name: dir
          description: "1 for upvote  0 for novote -1 for downvote"
          required: true
          schema:
            type: integer
      responses:
        201:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        409:
          description: Conflict Not Completed Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: "you already upvote (downvote) comment"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: comment not found
  /comment/{commentId}/spam:
    patch:
      tags:
        - Comments
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Mark a comment in the subreddit as spam
      parameters:
        - name: commentId
          in: path
          description: id of the post
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  #subreddit

  /subreddit:
    post:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Create a subreddit
      requestBody:
        description: Send the new permission
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                type:
                  type: string
                  enum:
                    - Public
                    - private
                    - restricted
                NSFW:
                  type: boolean

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: created subreddit id
                    type: string

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/{subredditName}:
    get:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Get a subreddit with id
      parameters:
        - name: subredditName
          in: path
          description: get a subreddit
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fullSubreddit"

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    patch:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Eddit a subreddit info with id
      parameters:
        - name: subredditName
          in: path
          description: subreddit id
          required: true
          schema:
            type: string

      requestBody:
        description: Send the new info
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/fullSubreddit"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fullSubreddit"

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Delete a subreddit with id
      parameters:
        - name: subredditName
          in: path
          description: get a subreddit
          required: true
          schema:
            type: string

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

      #invite mod

  /subreddit/{subredditName}/moderator/{moderatorName}:
    post:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Invite a moderator to the subreddit
      description: A moderator of the subreddit invite a user to be a moderator using the id of the user
      parameters:
        - name: subredditName
          in: path
          description: id of the subreddit
          required: true
          schema:
            type: string
        - name: moderatorName
          in: path
          description: id of the invited user
          required: true
          schema:
            type: string
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Remove a moderator from the subreddit
      description: An old moderator of the subreddit remove a newer moderator from the subreddit using the id of the new one
      parameters:
        - name: subredditName
          in: path
          description: id of the subreddit
          required: true
          schema:
            type: string
        - name: moderatorName
          in: path
          description: id of the moderator to be removed
          required: true
          schema:
            type: string
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    patch:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Edit the permissions of a moderator in the subreddit
      description: An old moderator of the subreddit can edit the permissions of a newer moderator in the subreddit using the id of the new one
      parameters:
        - name: subredditName
          in: path
          description: id of the subreddit
          required: true
          schema:
            type: string
        - name: moderatorName
          in: path
          description: id of the moderator to be edited
          required: true
          schema:
            type: string

      requestBody:
        description: Send the new permission
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  type: object
                  properties:
                    all:
                      type: boolean
                    access:
                      type: boolean
                    config:
                      type: boolean
                    flair:
                      type: boolean
                    posts:
                      type: boolean

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reducedModeratorInfo"
        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/{subredditName}/ban/user/{userName}:
    post:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Ban a certain user in the subreddit
      description: Ban a certain user on the subreddit
      parameters:
        - name: subredditName
          in: path
          description: id of the subreddit
          required: true
          schema:
            type: string
        - name: userName
          in: path
          description: id of the user
          required: true
          schema:
            type: string

      requestBody:
        description: Send ban info
        content:
          application/json:
            schema:
              type: object
              required:
                - ban reason
              properties:
                ban_reason:
                  type: string
                  enum:
                    - No Spoiler
                    - Spam
                    - Personal And confidential Information
                    - Threatening, harassing or inciting violence
                moderator_note:
                  type: string
                  description: short note about the ban
                ban_message:
                  type: string
                  description: more info about the ban to be sent to the user
                duration:
                  type: integer
                  format: int64
                  description: for how long he will be banned (either permanently or for a certain number of days)

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    patch:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Edit ban info of a certain banned user in the subreddit
      description: Edit ban info of a certain banned user in the subreddit
      parameters:
        - name: subredditName
          in: path
          description: id of the subreddit
          required: true
          schema:
            type: string
        - name: userName
          in: path
          description: id of the user
          required: true
          schema:
            type: string

      requestBody:
        description: Send ban info
        content:
          application/json:
            schema:
              type: object

              properties:
                ban_reason:
                  type: string
                  enum:
                    - No Spoiler
                    - Spam
                    - Personal And confidential Information
                    - Threatening, harassing or inciting violence
                moderator_note:
                  type: string
                  description: short note about the ban
                ban_message:
                  type: string
                  description: more info about the ban to be sent to the user
                duration:
                  type: integer
                  format: int64
                  description: for how long he will be banned (either permanently or for a certain number of days)
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /subreddit/{subredditName}/unban/user/{userName}:
    post:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: unban a banned user in the subreddit
      description: A moderator unban a certain user on the subreddit using the user id
      parameters:
        - name: subredditName
          in: path
          description: id of the subreddit
          required: true
          schema:
            type: string
        - name: userName
          in: path
          description: id of the user
          required: true
          schema:
            type: string
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /subreddit/{subredditName}/mute/user/{userName}:
    post:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Mute a certain user in the subreddit
      description: Mute a certain user on the subreddit
      parameters:
        - name: subredditName
          in: path
          description: id of the subreddit
          required: true
          schema:
            type: string
        - name: userName
          in: path
          description: id of the user
          required: true
          schema:
            type: string
      requestBody:
        description: Send mute info
        content:
          application/json:
            schema:
              type: object
              properties:
                mute_message:
                  type: string
                  description: more info about the ban to be sent to the user

      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /subreddit/{subredditName}/unmute/user/{userName}:
    post:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: unmute a certain user in the subreddit

      parameters:
        - name: subredditName
          in: path
          description: id of the subreddit
          required: true

          schema:
            type: string
        - name: userName
          description: id of the user
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/{subredditName}/post/{postId}/approve:
    patch:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: A moderator approve a post in the subreddit
      parameters:
        - name: subredditName
          in: path
          description: id of the subreddit
          required: true
          schema:
            type: string
        - name: postId
          in: path
          description: id of the post to approve
          required: true
          schema:
            type: string
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/subscribe:
    post:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Subscribe to or unsubscribe from a subreddit
      description: To subscribe, sub should be true. To unsubscribe, sub should be false. Use either subreddit to provide the name of subreddit or sr to provide its id. The user must have access to the subreddit to be able to subscribe to it
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sub:
                  type: boolean
                subreddit:
                  type: string
                  example: subreddit
                sr:
                  type: string
        required: true
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: subreddit not found
        400:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: The user doesn't have access to the subreddit

  /subreddit/{subredditName}/about/{location}:
    get:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Return a listing of posts relevant to moderators.
      description: This endpoint behavior depends on the location paremeter
        spam=> Things that have been marked as spam or otherwise removed.
        unmoderated=> Things that have yet to be approved/removed by a mod.
        edited=> Things that have been edited recently.
      parameters:
        - in: path
          name: subredditName
          description: subreddit id
          required: true
          schema:
            type: string
        - in: path
          name: location
          description: The category you want to retrieve
          required: true
          schema:
            type: string
            enum:
              - spam
              - unmoderated
              - edited
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer

      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: id not found
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /subreddit/{subredditName}/hot:
    get:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Return a listing of hot posts within the subreddit
      parameters:
        - in: path
          name: subredditName
          description: The subreddit name
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: subreddit not found

  /subreddit/{subredditName}/new:
    get:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Return a listing of new posts within the subreddit
      parameters:
        - in: path
          name: subredditName
          description: The subreddit name
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: subreddit not found

  /subreddit/{subredditName}/top:
    get:
      tags:
        - Subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Return a listing of top posts within the subreddit
      parameters:
        - in: path
          name: subredditName
          description: The subreddit name
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
        - in: query
          name: time
          required: true
          schema:
            type: string
            default: today
            enum:
              - now
              - today
              - week
              - month
              - year
              - all
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        404:
          description: failed operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: subreddit not found
  /subreddit/mine/{where}:
    description: Get Subreddits
    get:
      tags:
        - Subreddit
      description: Get subreddits belongs to me according to where parameter
      summary: Get subreddits
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: where
          description: type of relationship between user and subreddit
          required: true
          schema:
            type: string
            enum:
              - subscriber
              - moderator
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  subreddits:
                    type: array
                    items:
                      $ref: "#/components/schemas/Subreddit"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/{subredditName}/search:
    get:
      tags:
        - Subreddit
      summary: Search within a subreddit
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          description: The subreddit name
          required: true
          schema:
            type: string
        - in: query
          name: q
          description: The search query
          required: true
          schema:
            type: string
        - in: query
          name: sort
          schema:
            type: string
            default: relevance
            enum:
              - hot
              - top
              - new
              - relevance
              - comments
        - in: query
          name: type
          schema:
            type: string
            default: post
            enum:
              - sr
              - post
              - user
              - comment
        - in: query
          name: time
          schema:
            type: string
            default: day
            enum:
              - hour
              - day
              - week
              - month
              - year
              - all
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  - type: array
                    items:
                      $ref: "#/components/schemas/comment"
  /subreddit/{subredditName}/about/banned:
    get:
      tags:
        - Subreddit
      summary: ""
      description: "Get list of baned users in this subreddit"
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          description: The subreddit name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reducedModeratorInfo"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/{subredditName}/about/moderators:
    get:
      tags:
        - Subreddit
      summary: ""
      security:
        - BearerAuth: []
        - cookieAuth: []
      description: "Get list of moderators in this subreddit"
      parameters:
        - in: path
          name: subredditName
          description: The subreddit name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reducedModeratorInfo"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/{subredditName}/about/muted:
    get:
      tags:
        - Subreddit
      summary: ""
      description: "Get list of muted users in this subreddit"
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          description: The subreddit name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/reducedModeratorInfo"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/{subredditName}/acceptModeratorInvite:
    post:
      tags:
        - Subreddit

      description: "make the user moderator in this subreddit"
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          description: The subreddit name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: boolean
            application/xml:
              schema:
                type: boolean
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /subreddit/leaveModerator:
    post:
      tags:
        - Subreddit
      summary: "leave moderator rule"
      description: "make the user un moderator in this subreddit"

      security:
        - BearerAuth: []
        - cookieAuth: []
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  #messages

  /message/markAllAsRead:
    post:
      tags:
        - Private messages
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Mark all messages as read
      responses:
        "204":
          description: successful operation

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /message/sent:
    get:
      tags:
        - Private messages
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: Get the list of sent messages
      responses:
        "204":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/sentMessage"

        "400":
          description: Bad Request

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "401":
          description: Authorization Required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /message/postReplies:
    get:
      tags:
        - Messages
      summary: Returns a listing of top level replies(aka. post replies) of the user posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  Comment:
                    $ref: "#/components/schemas/comment"
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /message/comments:
    get:
      tags:
        - Messages
      summary: Returns a listing of comment replies(not including top level comments) of the user posts
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  Comment:
                    $ref: "#/components/schemas/comment"
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /message/mentions:
    get:
      tags:
        - Messages
      summary: Returns a listing of user mentions
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  Mentions:
                    type: array
                    items:
                      $ref: "#/components/schemas/mention"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /message/inbox:
    get:
      tags:
        - Private messages
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: inbox messages
      description: "get all messages sent to user"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/messages"
            application/xml:
              schema:
                $ref: "#/components/schemas/messages"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /message/unread:
    get:
      tags:
        - Private messages
      security:
        - BearerAuth: []
        - cookieAuth: []
      summary: inbox messages
      description: "get unreaded messages sent to user"

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/messages"
            application/xml:
              schema:
                $ref: "#/components/schemas/messages"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /message:
    description: Message Resource
    post:
      tags:
        - "Private messages"
      description: Send message to user (sender -> user or subreddit, receiver -> user)
      summary: Create Message
      security:
        - BearerAuth: []
        - cookieAuth: []
      requestBody:
        description: Message Body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                senderType:
                  type: string
                  enum:
                    - user
                    - subreddit
                name:
                  type: string
                  example: name
                to:
                  type: string
                  example: userName
                subject:
                  type: string
                  example: subject
                text:
                  type: string
                  example: text body

      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /message/{messageid}:
    description: Message Resource
    delete:
      tags:
        - "Private messages"
      description: Delete message from user
      summary: Delete Message
      parameters:
        - in: path
          name: messageid
          description: id of message
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /message/{messageId}/unreadMessage:
    patch:
      tags:
        - Private messages
      summary: mark message as unreaded
      description: "mark message as unreaded"
      security:
        - BearerAuth: []
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/unread_msg"

      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: boolean
            application/xml:
              schema:
                type: boolean
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  #Notification
  /user/notification:
    get:
      tags:
        - Notifications
      summary: return a listing of all notifications

      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: query
          name: page
          description: The page number
          required: true
          schema:
            type: integer
        - in: query
          name: limit
          description: The limit of each page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /user/{userName}/{fileName}:
    description: deal with files (images)
    post:
      tags:
        - Images
      description: upload users file in its folder
      summary: Upload file (image)
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          description: user Name (the authenticated user)
          required: true
          schema:
            type: string
        - in: path
          name: fileName
          description: filename of file to be saved
          required: true
          schema:
            type: string
        - in: query
          name: type
          description: attribute or kind of image you want to save in file
          required: true
          schema:
            type: string
            enum:
              - profileicon
              - background
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  example: uniqueuser
                file:
                  type: string
                  format: binary
                  example: profile.png
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        401:
          $ref: "#/components/responses/UnauthorizedError"
    get:
      tags:
        - Images
      description: get user file in its folder
      summary: get file (image)
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          description: user Name (the authenticated user)
          required: true
          schema:
            type: string
        - in: path
          name: fileName
          description: filename of file to be saved
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success operation
          content:
            image/*:
              schema:
                type: string
                format: binary
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Images
      description: delete user file in its folder
      summary: delete (image)
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: userName
          description: user Name (the authenticated user)
          required: true
          schema:
            type: string
        - in: path
          name: fileName
          description: filename of file to be saved
          required: true
          schema:
            type: string
        - in: query
          name: type
          description: attribute or kind of image you want to save in file
          required: true
          schema:
            type: string
            enum:
              - profileicon
              - background
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: file not found
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /subreddit/{subredditName}/{fileName}:
    description: deal with files (images)
    post:
      tags:
        - Images
      description: upload subreddit file in its folder
      summary: Upload file (image)
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          description: subreddit Name (the authenticated user)
          required: true
          schema:
            type: string
        - in: path
          name: fileName
          description: filename of file to be saved
          required: true
          schema:
            type: string
        - in: query
          name: type
          description: attribute or kind of image you want to save in file
          required: true
          schema:
            type: string
            enum:
              - profileicon
              - background
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  example: uniqueuser
                file:
                  type: string
                  format: binary
                  example: profile.png
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: you are not a moderator
        401:
          $ref: "#/components/responses/UnauthorizedError"
    get:
      tags:
        - Images
      description: get subreddit file in its folder
      summary: get file (image)
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          description: subreddit Name (the authenticated user)
          required: true
          schema:
            type: string
        - in: path
          name: fileName
          description: filename of file to be saved
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success operation
          content:
            image/*:
              schema:
                type: string
                format: binary
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Images
      description: delete subreddit file in its folder
      summary: delete (image)
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: subredditName
          description: subredditName Name (the authenticated user)
          required: true
          schema:
            type: string
        - in: path
          name: fileName
          description: filename of file to be saved
          required: true
          schema:
            type: string
        - in: query
          name: type
          description: attribute or kind of image you want to save in file
          required: true
          schema:
            type: string
            enum:
              - profileicon
              - background
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: you are not a moderator
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: file not found
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /post/{postId}/{fileName}:
    description: deal with files (images)
    post:
      tags:
        - Images
      description: upload post file in its folder
      summary: Upload file (image)
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: postId
          description: id of post
          required: true
          schema:
            type: string
        - in: path
          name: fileName
          description: filename of file to be saved
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  example: uniqueuser
                file:
                  type: string
                  format: binary
                  example: post.png
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: you are not owner of this post
        401:
          $ref: "#/components/responses/UnauthorizedError"
    get:
      tags:
        - Images
      description: get post file in its folder
      summary: get file (image)
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: postId
          description: id of post
          required: true
          schema:
            type: string
        - in: path
          name: fileName
          description: filename of file to be saved
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success operation
          content:
            image/*:
              schema:
                type: string
                format: binary
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Images
      description: delete post file in its folder
      summary: delete (image)
      security:
        - BearerAuth: []
        - cookieAuth: []
      parameters:
        - in: path
          name: postId
          description: id of post
          required: true
          schema:
            type: string
        - in: path
          name: fileName
          description: filename of file to be saved
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: you are not owner of this post
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: fail
                  message:
                    type: string
                    example: file not found
        401:
          $ref: "#/components/responses/UnauthorizedError"
components:
  schemas:
    userPreferences:
      type: object
      properties:
        contentvisibility:
          type: boolean
          example: true
        canbeFollowed:
          type: boolean
          example: true
        displayName:
          type: string
          example: "firstname secondname"
        nsfw:
          type: boolean
          example: true
        allowInboxMessages:
          type: boolean
          example: true
        allowCommentsOnPosts:
          type: boolean
          example: true
        allowUpvotesPosts:
          type: boolean
          example: true
        allowUpvotesComments:
          type: boolean
          example: true
        allowMentions:
          type: boolean
          example: true

    error:
      type: object
      properties:
        errorMessage:
          type: string

    reducedModeratorInfo:
      type: object
      properties:
        id:
          type: string
        userName:
          type: string
        joiningDate:
          type: string
          format: date-time
        moderatorPermissions:
          type: object
          properties:
            all:
              type: boolean
            access:
              type: boolean
            config:
              type: boolean
            flair:
              type: boolean
            posts:
              type: boolean
    reducedSubredditInfo:
      type: object
      properties:
        name:
          type: string
        id:
          type: string

    sentMessage:
      properties:
        id:
          type: string
        isRead:
          type: boolean
        subject:
          type: string
        recieverId:
          type: string
        recieverName:
          type: string
        subredditId:
          type: string
        subredditName:
          type: string
        creationDate:
          type: string
          format: date
        isDeleted:
          type: boolean

    fullSubreddit:
      properties:
        removalReasons:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
        rules:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            defaultName:
              type: string
            appliesTo:
              type: string
              enum:
                - Posts and comments
                - Posts only
                - Comments only
        name:
          type: string
        description:
          type: string
        topics:
          type: array
        language:
          type: string
        region:
          type: string
        type:
          type: string
          enum:
            - Public
            - Private
            - Restricted
        nsfw:
          type: boolean
        postType:
          type: string
          enum:
            - Any
            - Links only
            - Text posts only
        allowCrossposting:
          type: boolean
        allowArchivePosts:
          type: boolean
        allowSpoilerTag:
          type: boolean
        allowGif:
          type: boolean
        allowImageUploads:
          type: boolean
        allowMultipleImage:
          type: boolean

    User:
      type: object
      properties:
        id:
          type: string
          format: int64
          example: 10
        userName:
          type: string
          example: uniqueuser
        email:
          type: string
          example: user@email.com
        profilePicture:
          type: string
          example: img.png
        contentvisibility:
          type: boolean
          example: true
        canbeFollowed:
          type: boolean
          example: true
        lastUpdatedPassword:
          type: string
          example: 2022-10-22-06-12
          format: date-time
        followersCount:
          type: integer
          example: 0
        friendsCount:
          type: integer
          example: 0
        accountActivated:
          type: boolean
          example: true
        gender:
          type: string
          example: male
        displayName:
          type: string
          example: "firstname secondname"
        karma:
          type: integer
          example: 1

    Subreddit:
      type: object
      properties:
        id:
          type: string
          format: int64
          example: 10
        subredditName:
          type: string
          example: uniquesubreddit
        rank:
          type: integer
          example: 1
        isJoined:
          type: boolean
          example: false
        membersCount:
          type: integer
          example: 10000
        description:
          type: string
          example: "welcome to subreddit"

    PostCreate:
      type: object
      properties:
        title:
          type: string
        kind:
          type: string
          enum:
            - link
            - self
            - image
            - video
        text:
          type: string
          description: the text of the post in case the kind is self
        url:
          type: string
          description: A valid URL in case the kind is link
        sr:
          type: string
          description: subreddit name
        nsfw:
          type: boolean
        spoiler:
          type: boolean
        sendreplies:
          type: boolean
          description: indicates whether the post accepts replies in private messages or not
        flairId:
          type: string
        flairText:
          type: string

    Post:
      type: object
      properties:
        creator:
          type: string
          description: The name of the user who created the post
        owner:
          type: string
          description: The name of the subreddit where the post was created. If the post was created in a user profile the userName is passesd instead
        title:
          type: string
        kind:
          type: string
          enum:
            - link
            - self
            - image
            - video
        text:
          type: string
          description: the text of the post in case the kind is self
        url:
          type: string
          description: A valid URL in case the kind is link
        sr:
          type: string
          description: subreddit name
        votes:
          type: integer
          description: total number of votes
        commentCount:
          type: integer
          description: total number of comments
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        suggestedSort:
          type: string
          enum:
            - top
            - new
            - best
            - old
        nsfw:
          type: boolean
        spoiler:
          type: boolean
        sendReplies:
          type: boolean
          description: indicates whether the post accepts replies in private messages or not
        locked:
          type: boolean
          description: whether the post can receive comments or not
        flairId:
          type: string
        flairText:
          type: string

    comment:
      type: object
      properties:
        creator:
          type: string
          description: The name of the user who created the comment
        text:
          type: string
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        votes:
          type: integer
          description: total number of votes

    mention:
      type: object
      properties:
        to:
          type: string
          description: The user who got mentioned
        from:
          type: string
          description: The user who wrote the mention
        subreddit:
          type: string
        postId:
          type: string
        commentCount:
          type: integer
          example: 7
        Comment:
          $ref: "#/components/schemas/comment"

    overview:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: "#/components/schemas/comment"
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"

        count:
          type: integer

    upvotes:
      type: object
      properties:
        Posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"

    downvotes:
      type: object
      properties:
        Posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"

        count:
          type: integer

    subbmitComment:
      type: object
      properties:
        parentCommentId:
          type: string
        postId:
          type: string
        text:
          type: string

    suggestedSort:
      type: object
      properties:
        sort:
          type: string
          enum:
            - best
            - top
            - hot
            - new
          default: top

    suggestedSortResult:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: "#/components/schemas/comment"

    flair:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        backgroundColor:
          type: string
        textColor:
          type: string
        permission:
          type: string
          enum:
            - modOnly
            - allowEdit
    messages:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/message"

    message:
      type: object
      properties:
        id:
          type: integer
        readed:
          type: boolean
          default: false
        deleted:
          type: boolean
          default: false
        subject:
          type: string
        destination:
          type: string
        createdAt:
          type: string
          format: date-time
        author:
          type: string
        subreddit:
          type: string
      xml:
        name: tag

    unread_msg:
      type: object
      properties:
        messageId:
          type: string
      xml:
        name: tag

    subreddit:
      type: object
      properties:
        userNames:
          type: array
          items:
            $ref: "#/components/schemas/User"

    trending:
      type: object
      properties:
        searchQuery:
          type: string
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"

    Notification:
      type: object
      properties:
        type:
          type: string
          enum:
            - post_reply
            - comment_reply
            - post_upvote
            - comment_upvote
            - user_mention
            - follower
            - msg
        subreddit:
          type: string
          description: The name of the subreddit
        postId:
          type: string
        commentId:
          type: string
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        userId:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt # cookie name

  responses:
    UnauthorizedError:
      description: unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: fail
              message:
                type: string
                example: unauthorized
