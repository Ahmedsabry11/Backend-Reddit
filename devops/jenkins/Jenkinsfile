pipeline {
    agent any
    stages {
        stage('Building backend') {
    	    when { branch "development" }
            environment {
                GIT_PASSWORD = credentials('github-pat')
                DB_CREDS = credentials('db-creds')
                DB_NAME = credentials('db-name')
                EMAIL_CREDS = credentials('email-creds')
                DOCKER_CREDS = credentials('docker-creds')
                FACEBOOK_APP = credentials('facebook-app')
                GOOGLE_APP = credentials('google-app')
                JWT_SECRET = credentials('jwt-secret')
                EMAIL_HOST = credentials('email-host')
                EMAIL_PORT = credentials('email-port')
		        FIREBASE_SERVER_KEY = credentials('firebase-server-key')
                AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
                AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
                SOURCE_EMAIL = credentials('source-email')
            }
            steps {
                sh(returnStdout: true, script: "bash -e /var/jenkins_home/docker-compose/build/build.sh")
            }
        }
        stage('Deploying backend') {
    	    when { branch "development" }
            environment {
                DB_CREDS = credentials('db-creds')
                NONLEGIT = credentials('nonlegit-db-user')
                BACKEND = credentials('backend-db-user')
                AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
                AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
                SOURCE_EMAIL = credentials('source-email')
            }
            steps {
                script {
                    commit = sh(returnStdout: true, script: 'git log -1 --oneline').trim()
                    commitMsg = commit.substring( commit.indexOf(' ')).trim()
                    println commitMsg
                    if (commitMsg.contains('dropdb')) {
                        sh '''
                            cd /var/jenkins_home/docker-compose/backend
                            docker compose down || true
                            docker volume prune -f
                            docker volume ls
                            docker compose up -d
                        '''
                        
                        /* Create mongodb users. */
                        sh(returnStdout: true, script: "#!/bin/bash\n" + "docker exec backend-mongodb-1 mongosh -u $DB_CREDS_USR -p $DB_CREDS_PSW --eval 'db = db.getSiblingDB(\"redditDB\"); db.createUser( { user: \"$NONLEGIT_USR\", pwd: \"$NONLEGIT_PSW\", roles: [ { role: \"read\", db: \"redditDB\" } ] }); db.createUser( { user: \"$BACKEND_USR\", pwd: \"$BACKEND_PSW\", roles: [ { role: \"readWrite\", db: \"redditDB\" } ] })'")
                    } else {
                                sh '''
                                    cd /var/jenkins_home/docker-compose/backend
                                    docker compose down || true
                                    docker compose up -d
                                    aws ses send-email --from $SOURCE_EMAIL --source-arn "arn:aws:ses:us-east-1:965189571202:identity/ysi.rabie@gmail.com" --destination "ToAddresses=ysi.rabie@gmail.com" --region us-east-1 --message "Subject={Data=Deployment Successful},Body={Text={Data=success}}"
                                '''
                    }
                }
            }
        }
    }
}
